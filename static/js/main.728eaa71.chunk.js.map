{"version":3,"sources":["resource/img/logo.svg","layout/container/LayoutContainar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LayoutContainar","state","layBarBut","layBar","width","layContainer","onClick","setState","transform","cayoutContent","this","props","className","style","Input","icon","placeholder","onChange","e","v","console","log","value","to","class","background","Component","Routes","Fragment","from","exact","path","component","Home","PureComponent","src","logo","alt","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,kC,mNCyE5BC,E,4MAnEbC,MAAQ,CACNC,UAAW,GACXC,OAAQ,CAAEC,MAAO,SACjBC,aAAc,CAAED,MAAO,uB,EAGzBE,QAAU,WAEa,OADF,EAAKL,MAAhBE,OACGC,MACT,EAAKG,SAAS,CACZL,UAAW,GACXC,OAAQ,CAAEC,MAAO,SACjBC,aAAc,CAAED,MAAO,wBAGzB,EAAKG,SAAS,CACZL,UAAW,CAAEM,UAAW,kBACxBL,OAAQ,CAAEC,MAAO,MACjBC,aAAc,CAAED,MAAO,W,uDAKnB,IACAK,EAAkBC,KAAKC,MAAvBF,cADD,EAEqCC,KAAKT,MAAzCI,EAFD,EAECA,aAAcF,EAFf,EAEeA,OAAQD,EAFvB,EAEuBA,UAC9B,OACE,kBAAC,WAAD,KACE,yBAAKU,UAAU,YACb,yBAAKA,UAAU,UAAUC,MAAOV,GAC9B,kBAACW,EAAA,EAAD,CACEC,KAAK,SACLC,YAAY,YAEZC,SAAU,SAACC,EAAGC,GAAJ,OAAUC,QAAQC,IAAIH,EAAGC,EAAEG,UAEvC,4BACE,6BACA,6BACA,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAIN,yBAAKX,UAAU,gBAAgBC,MAAOR,GACpC,yBAAKO,UAAU,cACb,4BACEY,MAAM,wCACNlB,QAASI,KAAKJ,QACdO,MAAO,CAAEY,WAAY,UAErB,kBAAC,IAAD,CAAkBZ,MAAOX,MAG7B,yBAAKU,UAAU,eACZH,U,GA3DeiB,a,kCCWfC,E,uKATX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAUC,KAAK,IAAIN,GAAG,MACtB,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAW,kBAAM,kBAAC,IAAD,c,GANzBE,iBAarB,SAASD,IACP,OACE,6BACE,yBAAKE,IAAKC,IAAMxB,UAAU,WAAWyB,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEzB,UAAU,WACV0B,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gB,ICISC,E,uKAhBX,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEH,cACE,4BAAQG,UAAU,cAChB,kBAAC,EAAD,e,GAREc,aCCEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.728eaa71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { RiArrowLeftSLine } from \"react-icons/ri\";\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nclass LayoutContainar extends Component {\r\n  state = {\r\n    layBarBut: {},\r\n    layBar: { width: \"300px\" },\r\n    layContainer: { width: \"calc(100% - 300px)\" },\r\n  };\r\n\r\n  onClick = () => {\r\n    const { layBar } = this.state;\r\n    if (layBar.width === \"0%\") {\r\n      this.setState({\r\n        layBarBut: {},\r\n        layBar: { width: \"300px\" },\r\n        layContainer: { width: \"calc(100% - 300px)\" },\r\n      });\r\n    } else {\r\n      this.setState({\r\n        layBarBut: { transform: \"rotate(180deg)\" },\r\n        layBar: { width: \"0%\" },\r\n        layContainer: { width: \"100%\" },\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { cayoutContent } = this.props;\r\n    const { layContainer, layBar, layBarBut } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"lay-main\">\r\n          <div className=\"lay-bar\" style={layBar}>\r\n            <Input\r\n              icon=\"search\"\r\n              placeholder=\"Search...\"\r\n              // value={this.state.value}\r\n              onChange={(e, v) => console.log(e, v.value)}\r\n            />\r\n            <ul>\r\n              <li></li>\r\n              <li></li>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/test1\">test1</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"lay-container\" style={layContainer}>\r\n            <div className=\"lay-header\">\r\n              <button\r\n                class=\"ui icon right button huge lay-bar-but\"\r\n                onClick={this.onClick}\r\n                style={{ background: \"white\" }}\r\n              >\r\n                <RiArrowLeftSLine style={layBarBut} />\r\n              </button>\r\n            </div>\r\n            <div className=\"lay-content\">\r\n              {cayoutContent}\r\n              {/* <div className=\"lay-content-test\">text</div> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default LayoutContainar;\r\n","import React, { PureComponent } from \"react\";\r\nimport { BrowserRouter, Route, Switch, Link, Redirect } from \"react-router-dom\";\r\nimport { IoMdPerson } from \"react-icons/io\";\r\nimport logo from \"./resource/img/logo.svg\";\r\n\r\nclass Routes extends PureComponent {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Redirect from=\"/\" to=\"/\" />\r\n        <Route exact path=\"/\" component={Home}></Route>\r\n        <Route path=\"/test1\" component={() => <IoMdPerson />}></Route>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Routes;\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.js</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Learn React\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Layout } from \"./layout\";\r\n\r\nimport Routes from \"./Routes\";\r\n\r\n//  {/* 출처:\r\n//       https://codingbroker.tistory.com/72\r\n//       https://www.hohyeonmoon.com/blog/react-js-github-pages-deploy/\r\n//       https://velog.io/@byjihye/react-github-pages */}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <Layout\r\n            cayoutContent={\r\n              <header className=\"App-header\">\r\n                <Routes />\r\n              </header>\r\n            }\r\n          />\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./resource/css/index.css\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}